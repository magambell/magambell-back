name: Build and Push to ECR

on:
  push:
    branches:
      - dev # 또는 원하는 브랜치명

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Give execute permission to gradlew
        run: chmod +x ./gradlew  # gradlew에 실행 권한 부여

      - name: Build with Gradle
        run: ./gradlew build

      - name: Log in to Amazon ECR
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ECR_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_ECR_SECRET_KEY }}
          aws-region: ap-northeast-2  # 사용할 리전 설정

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Check and create ECR repository
        run: |
          if ! aws ecr describe-repositories --repository-names ${{ secrets.ECR_REPOSITORY }} &>/dev/null; then
            echo "Creating ECR repository: ${{ secrets.ECR_REPOSITORY }}"
              aws ecr create-repository --repository-name ${{ secrets.ECR_REPOSITORY }}
            else
              echo "ECR repository already exists: ${{ secrets.ECR_REPOSITORY }}"
          fi

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
          IMAGE_TAG: latest
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG \
            --build-arg JAR_FILE=build/libs/*.jar \
            --build-arg MARIA_PASSWORD=${{ secrets.MARIA_PASSWORD }} \
            --build-arg MARIA_USERNAME=${{ secrets.MARIA_USERNAME }} \
            --build-arg SERVER_HOST=${{ secrets.SERVER_HOST }} \
            --build-arg AWS_ECR_ACCESS_KEY=${{ secrets.AWS_ECR_ACCESS_KEY }} \
            --build-arg AWS_ECR_SECRET_KEY=${{ secrets.AWS_ECR_SECRET_KEY }} \
            --build-arg AWS_SES_ACCESS_KEY=${{ secrets.AWS_SES_ACCESS_KEY }} \
            --build-arg AWS_SES_SECRET_KEY=${{ secrets.AWS_SES_SECRET_KEY }} \
            --build-arg AWS_CF_DISTRIBUTION=${{ secrets.AWS_CF_DISTRIBUTION }} \
            --build-arg AWS_S3_BUCKET=${{ secrets.AWS_S3_BUCKET }} \
            --build-arg JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }} \
            --build-arg NAVER_CLIENT_ID=${{ secrets.NAVER_CLIENT_ID }} \
            --build-arg NAVER_CLIENT_SECRET=${{ secrets.NAVER_CLIENT_SECRET }} \
            --build-arg PORT_ONE_STORE_ID=${{ secrets.PORT_ONE_STORE_ID }} \
            --build-arg PORT_ONE_API_KEY=${{ secrets.PORT_ONE_API_KEY }} \
            --build-arg PORT_ONE_WEB_HOOK=${{ secrets.PORT_ONE_WEB_HOOK }} \
            --build-arg FIREBASE_CONFIG_JSON=${{ secrets.FIREBASE_CONFIG_JSON }} \
            --build-arg SPRING_PROFILES_ACTIVE=prod \
            .
          
          echo "ECR REGISTRY: $ECR_REGISTRY"
          echo "ECR_REPOSITORY: $ECR_REPOSITORY"
          
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Deploy to Dev
        uses: appleboy/ssh-action@master
        with:
          username: ubuntu
          host: ${{ secrets.EC2_HOST }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          script: |
            export SERVER_HOST=${{ secrets.SERVER_HOST }}
            export MARIA_USERNAME=${{ secrets.MARIA_USERNAME }}
            export MARIA_PASSWORD=${{ secrets.MARIA_PASSWORD }}
            export AWS_ECR_ACCESS_KEY=${{ secrets.AWS_ECR_ACCESS_KEY }}
            export AWS_ECR_SECRET_KEY=${{ secrets.AWS_ECR_SECRET_KEY }}
            export AWS_SES_ACCESS_KEY=${{ secrets.AWS_SES_ACCESS_KEY }}
            export AWS_SES_SECRET_KEY=${{ secrets.AWS_SES_SECRET_KEY }}
            export AWS_CF_DISTRIBUTION=${{ secrets.AWS_CF_DISTRIBUTION }}
            export AWS_S3_BUCKET=${{ secrets.AWS_S3_BUCKET }}
            export JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }}
            export NAVER_CLIENT_ID=${{ secrets.NAVER_CLIENT_ID }}
            export NAVER_CLIENT_SECRET=${{ secrets.NAVER_CLIENT_SECRET }}
            export PORT_ONE_STORE_ID=${{ secrets.PORT_ONE_STORE_ID }}
            export PORT_ONE_API_KEY=${{ secrets.PORT_ONE_API_KEY }}
            export PORT_ONE_WEB_HOOK=${{ secrets.PORT_ONE_WEB_HOOK }}
            export FIREBASE_CONFIG_JSON=${{ secrets.FIREBASE_CONFIG_JSON }}
            export SPRING_PROFILES_ACTIVE=prod
            sudo -E bash /home/ubuntu/deploy.sh
            
